### TechTicker API Gateway Test Requests
### Base URL for local development
@baseUrl = https://localhost:7000
@userServiceUrl = https://localhost:7001

### Variables for testing
@testEmail = admin@techticker.com
@testPassword = Admin123!

###
### 1. Gateway Health and Status Checks
###

### Basic Gateway Health Check
GET {{baseUrl}}/health

### Gateway Status Information
GET {{baseUrl}}/gateway/status

### Gateway Root Information
GET {{baseUrl}}/

###
### 2. Authentication Flow (via Gateway)
###

### User Login via Gateway - Get JWT Token
POST {{baseUrl}}/connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&username={{testEmail}}&password={{testPassword}}&client_id=TechTicker.Client

> {%
client.test("Request executed successfully", function() {
    client.assert(response.status === 200, "Response status is not 200");
});

client.test("Response contains access_token", function() {
    var jsonData = response.body;
    client.assert(jsonData.access_token, "access_token is not present");
    client.global.set("auth_token", jsonData.access_token);
});
%}

### Alternative: Direct login to User Service (for token generation)
POST {{userServiceUrl}}/connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&username={{testEmail}}&password={{testPassword}}&client_id=TechTicker.Client

###
### 3. Categories API (via Gateway)
###

### Get all categories via Gateway
GET {{baseUrl}}/api/v1/categories
Authorization: Bearer {{auth_token}}

### Get specific category via Gateway
GET {{baseUrl}}/api/v1/categories/gpu
Authorization: Bearer {{auth_token}}

### Create new category via Gateway
POST {{baseUrl}}/api/v1/categories
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "name": "Test Category via Gateway",
  "description": "A test category created through the API Gateway"
}

###
### 4. Products API (via Gateway)
###

### Get all products via Gateway
GET {{baseUrl}}/api/v1/products
Authorization: Bearer {{auth_token}}

### Get products with category filter via Gateway
GET {{baseUrl}}/api/v1/products?categoryId=gpu&pageSize=5
Authorization: Bearer {{auth_token}}

### Get specific product via Gateway
GET {{baseUrl}}/api/v1/products/{{productId}}
Authorization: Bearer {{auth_token}}

###
### 5. Product Seller Mappings API (via Gateway)
###

### Get all mappings via Gateway
GET {{baseUrl}}/api/v1/mappings
Authorization: Bearer {{auth_token}}

### Get active mappings via Gateway
GET {{baseUrl}}/api/v1/mappings/active
Authorization: Bearer {{auth_token}}

###
### 6. Site Configurations API (via Gateway)
###

### Get all site configurations via Gateway
GET {{baseUrl}}/api/v1/site-configs
Authorization: Bearer {{auth_token}}

### Create new site configuration via Gateway
POST {{baseUrl}}/api/v1/site-configs
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "siteDomain": "test-store.com",
  "productNameSelector": "h1.product-title",
  "priceSelector": ".price-current",
  "stockSelector": ".stock-status"
}

###
### 7. Users API (via Gateway)
###

### Register a new user via Gateway
POST {{baseUrl}}/api/v1/users/register
Content-Type: application/json

{
  "firstName": "Test",
  "lastName": "User",
  "email": "testuser@example.com",
  "password": "TestPassword123!"
}

### Login user via Gateway
POST {{baseUrl}}/api/v1/users/login
Content-Type: application/json

{
  "email": "testuser@example.com",
  "password": "TestPassword123!"
}

### Get current user info via Gateway
GET {{baseUrl}}/api/v1/users/me
Authorization: Bearer {{auth_token}}

### Get user info via OpenID Connect userinfo endpoint
GET {{baseUrl}}/connect/userinfo
Authorization: Bearer {{auth_token}}

###
### 8. Price History API (via Gateway)
###

### Get price history for a product via Gateway
GET {{baseUrl}}/api/v1/prices/{{productId}}/history
Authorization: Bearer {{auth_token}}

###
### 9. Rate Limiting Tests
###

### Test rate limiting - make multiple rapid requests
GET {{baseUrl}}/api/v1/categories
Authorization: Bearer {{auth_token}}

###
GET {{baseUrl}}/api/v1/categories
Authorization: Bearer {{auth_token}}

###
GET {{baseUrl}}/api/v1/categories
Authorization: Bearer {{auth_token}}

###
### 10. Error Handling Tests
###

### Test authentication failure
GET {{baseUrl}}/api/v1/categories
Authorization: Bearer invalid-token

### Test non-existent endpoint
GET {{baseUrl}}/api/v1/nonexistent

### Test malformed request
POST {{baseUrl}}/api/v1/categories
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "invalid": "data"
}

###
### 11. Security Tests
###

### Test request without User-Agent (should be blocked)
GET {{baseUrl}}/api/v1/categories
Authorization: Bearer {{auth_token}}
User-Agent:

### Test with suspicious path (should be blocked)
GET {{baseUrl}}/api/v1/../../../etc/passwd
Authorization: Bearer {{auth_token}}

### Test OPTIONS request (CORS)
OPTIONS {{baseUrl}}/api/v1/categories
Origin: http://localhost:3000

###
### 12. Gateway Metadata Tests
###

### Check response headers for gateway metadata
GET {{baseUrl}}/api/v1/categories
Authorization: Bearer {{auth_token}}

> {%
client.test("Response contains gateway headers", function() {
    client.assert(response.headers.valueOf("X-API-Gateway") === "TechTicker-Gateway", "X-API-Gateway header not found");
    client.assert(response.headers.valueOf("X-Gateway-Version") === "1.0.0", "X-Gateway-Version header not found");
    client.assert(response.headers.valueOf("X-Correlation-ID"), "X-Correlation-ID header not found");
});
%}
