### TechTicker Price Normalization & Ingestion Service API Testing

# Note: The Price Normalization Service is a Worker Service that primarily communicates via RabbitMQ messages
# It does not expose HTTP endpoints for direct testing
# This file is included for consistency with other services in the solution

### RabbitMQ Message Testing
# To test the Price Normalization Service:
# 1. Ensure RabbitMQ is running
# 2. Start the TechTicker solution with Aspire
# 3. Send RawPriceDataEvent messages to the raw-price-data-queue
# 4. Monitor the price-point-recorded exchange for PricePointRecordedEvent messages

### Example input message structure for RawPriceDataEvent:
# {
#   "CanonicalProductId": "550e8400-e29b-41d4-a716-446655440000",
#   "SellerName": "Amazon US",
#   "ScrapedPrice": 299.99,
#   "ScrapedStockStatus": "In Stock",
#   "Timestamp": "2025-06-14T10:30:00Z",
#   "SourceUrl": "https://amazon.com/product-xyz",
#   "ScrapedProductName": "Sample Product Name"
# }

### Example output message structure for PricePointRecordedEvent:
# {
#   "CanonicalProductId": "550e8400-e29b-41d4-a716-446655440000",
#   "SellerName": "Amazon US",
#   "Price": 299.99,
#   "StockStatus": "IN_STOCK",
#   "SourceUrl": "https://amazon.com/product-xyz",
#   "Timestamp": "2025-06-14T10:30:00Z",
#   "ProductName": "Sample Product Name",
#   "OriginalStockStatus": "In Stock"
# }

### Test Scenarios:
# 1. Valid price data normalization
# 2. Invalid price handling (negative, zero, out of range)
# 3. Stock status normalization (various formats)
# 4. Missing required fields handling
# 5. Malformed message handling

### Monitoring
# Monitor service logs for normalization activity and error handling
# Check Aspire dashboard for service health and message flow
# Verify message acknowledgment and retry behavior
