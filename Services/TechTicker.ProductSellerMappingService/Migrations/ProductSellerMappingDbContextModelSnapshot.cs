// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TechTicker.ProductSellerMappingService.Data;

#nullable disable

namespace TechTicker.ProductSellerMappingService.Migrations
{
    [DbContext(typeof(ProductSellerMappingDbContext))]
    partial class ProductSellerMappingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TechTicker.Shared.Models.ProductSellerMapping", b =>
                {
                    b.Property<Guid>("MappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CanonicalProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ExactProductUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<bool>("IsActiveForScraping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastScrapedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("NextScrapeAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScrapingFrequencyOverride")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("SiteConfigId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("MappingId");

                    b.HasIndex("CanonicalProductId")
                        .HasDatabaseName("IX_ProductSellerMappings_CanonicalProductId");

                    b.HasIndex("IsActiveForScraping")
                        .HasDatabaseName("IX_ProductSellerMappings_IsActiveForScraping");

                    b.HasIndex("NextScrapeAt")
                        .HasDatabaseName("IX_ProductSellerMappings_NextScrapeAt");

                    b.HasIndex("SellerName")
                        .HasDatabaseName("IX_ProductSellerMappings_SellerName");

                    b.HasIndex("SiteConfigId");

                    b.HasIndex("CanonicalProductId", "SellerName")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductSellerMappings_CanonicalProductId_SellerName_Unique");

                    b.ToTable("ProductSellerMappings");
                });

            modelBuilder.Entity("TechTicker.Shared.Models.ScraperSiteConfiguration", b =>
                {
                    b.Property<Guid>("SiteConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("PriceSelector")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductNameSelector")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SellerNameOnPageSelector")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiteDomain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StockSelector")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("SiteConfigId");

                    b.HasIndex("SiteDomain")
                        .IsUnique()
                        .HasDatabaseName("IX_ScraperSiteConfigurations_SiteDomain_Unique");

                    b.ToTable("ScraperSiteConfigurations");
                });

            modelBuilder.Entity("TechTicker.Shared.Models.ProductSellerMapping", b =>
                {
                    b.HasOne("TechTicker.Shared.Models.ScraperSiteConfiguration", "SiteConfiguration")
                        .WithMany("ProductSellerMappings")
                        .HasForeignKey("SiteConfigId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SiteConfiguration");
                });

            modelBuilder.Entity("TechTicker.Shared.Models.ScraperSiteConfiguration", b =>
                {
                    b.Navigation("ProductSellerMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
