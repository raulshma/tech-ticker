// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TechTicker.DataAccess;

#nullable disable

namespace TechTicker.DataAccess.Migrations
{
    [DbContext(typeof(TechTickerDbContext))]
    [Migration("20250618191118_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.AlertRule", b =>
                {
                    b.Property<Guid>("AlertRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CanonicalProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConditionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastNotifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NotificationFrequencyMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1440);

                    b.Property<decimal?>("PercentageValue")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("SpecificSellerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("ThresholdValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AlertRuleId");

                    b.HasIndex("CanonicalProductId");

                    b.HasIndex("UserId");

                    b.ToTable("AlertRules");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.DiscoveryApprovalWorkflow", b =>
                {
                    b.Property<Guid>("WorkflowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("ActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("Modifications")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.HasKey("WorkflowId");

                    b.HasIndex("Action");

                    b.HasIndex("ActionDate");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("DiscoveryApprovalWorkflows");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.PriceHistory", b =>
                {
                    b.Property<Guid>("PriceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CanonicalProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MappingId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ScrapedProductNameOnPage")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("StockStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PriceHistoryId");

                    b.HasIndex("CanonicalProductId");

                    b.HasIndex("SellerName");

                    b.HasIndex("Timestamp");

                    b.HasIndex("MappingId", "Timestamp");

                    b.HasIndex("CanonicalProductId", "SellerName", "Timestamp");

                    b.ToTable("PriceHistory");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ModelNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SKU")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Specifications")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasFilter("\"SKU\" IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ProductDiscoveryCandidate", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CategoryConfidenceScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0m);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DiscoveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DiscoveredByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DiscoveryMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExtractedDescription")
                        .HasColumnType("text");

                    b.Property<string>("ExtractedImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("ExtractedManufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ExtractedModelNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("ExtractedPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ExtractedProductName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExtractedSpecifications")
                        .HasColumnType("jsonb");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<Guid?>("SimilarProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SimilarityScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0m);

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("SuggestedCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CandidateId");

                    b.HasIndex("DiscoveredAt");

                    b.HasIndex("DiscoveredByUserId");

                    b.HasIndex("DiscoveryMethod");

                    b.HasIndex("SimilarProductId");

                    b.HasIndex("Status");

                    b.HasIndex("SuggestedCategoryId");

                    b.ToTable("ProductDiscoveryCandidates");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ProductSellerMapping", b =>
                {
                    b.Property<Guid>("MappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CanonicalProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("ConsecutiveFailureCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExactProductUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<bool>("IsActiveForScraping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastScrapeErrorCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastScrapeStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("LastScrapedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("NextScrapeAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScrapingFrequencyOverride")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("SiteConfigId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MappingId");

                    b.HasIndex("CanonicalProductId");

                    b.HasIndex("IsActiveForScraping");

                    b.HasIndex("NextScrapeAt");

                    b.HasIndex("SiteConfigId");

                    b.HasIndex("CanonicalProductId", "SellerName", "ExactProductUrl")
                        .IsUnique();

                    b.ToTable("ProductSellerMappings");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ScraperRunLog", b =>
                {
                    b.Property<Guid>("RunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalHeaders")
                        .HasColumnType("jsonb");

                    b.Property<int>("AttemptNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DebugNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("ErrorCategory")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("ErrorStackTrace")
                        .HasColumnType("text");

                    b.Property<decimal?>("ExtractedPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ExtractedProductName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExtractedSellerName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ExtractedStockStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("integer");

                    b.Property<Guid>("MappingId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("PageLoadTime")
                        .HasColumnType("interval");

                    b.Property<Guid?>("ParentRunId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("ParsingTime")
                        .HasColumnType("interval");

                    b.Property<string>("RawHtmlSnippet")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long?>("ResponseSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("ResponseTime")
                        .HasColumnType("interval");

                    b.Property<string>("Selectors")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("RunId");

                    b.HasIndex("ErrorCategory");

                    b.HasIndex("MappingId");

                    b.HasIndex("ParentRunId");

                    b.HasIndex("StartedAt");

                    b.HasIndex("Status");

                    b.HasIndex("MappingId", "StartedAt");

                    b.HasIndex("Status", "StartedAt");

                    b.ToTable("ScraperRunLogs");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ScraperSiteConfiguration", b =>
                {
                    b.Property<Guid>("SiteConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalHeaders")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultUserAgent")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("PriceSelector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductNameSelector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SellerNameOnPageSelector")
                        .HasColumnType("text");

                    b.Property<string>("SiteDomain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StockSelector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SiteConfigId");

                    b.HasIndex("SiteDomain")
                        .IsUnique();

                    b.ToTable("ScraperSiteConfigurations");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.SiteConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ConfidenceScore")
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("DescriptionSelectors")
                        .HasColumnType("jsonb");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ImageSelectors")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastTestResult")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("LastTestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManufacturerSelectors")
                        .HasColumnType("jsonb");

                    b.Property<string>("ModelNumberSelectors")
                        .HasColumnType("jsonb");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PriceSelectors")
                        .HasColumnType("jsonb");

                    b.Property<string>("ProductNameSelectors")
                        .HasColumnType("jsonb");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SpecificationSelectors")
                        .HasColumnType("jsonb");

                    b.Property<string>("TestHtml")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("SiteConfigurations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechTicker.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.AlertRule", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.Product", "Product")
                        .WithMany("AlertRules")
                        .HasForeignKey("CanonicalProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechTicker.Domain.Entities.ApplicationUser", "User")
                        .WithMany("AlertRules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.DiscoveryApprovalWorkflow", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.ProductDiscoveryCandidate", "Candidate")
                        .WithMany("ApprovalWorkflows")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechTicker.Domain.Entities.ApplicationUser", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.PriceHistory", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("CanonicalProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechTicker.Domain.Entities.ProductSellerMapping", "Mapping")
                        .WithMany("PriceHistory")
                        .HasForeignKey("MappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mapping");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.Product", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ProductDiscoveryCandidate", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.ApplicationUser", "DiscoveredByUser")
                        .WithMany()
                        .HasForeignKey("DiscoveredByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TechTicker.Domain.Entities.Product", "SimilarProduct")
                        .WithMany()
                        .HasForeignKey("SimilarProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TechTicker.Domain.Entities.Category", "SuggestedCategory")
                        .WithMany()
                        .HasForeignKey("SuggestedCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DiscoveredByUser");

                    b.Navigation("SimilarProduct");

                    b.Navigation("SuggestedCategory");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ProductSellerMapping", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.Product", "Product")
                        .WithMany("ProductSellerMappings")
                        .HasForeignKey("CanonicalProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechTicker.Domain.Entities.ScraperSiteConfiguration", "SiteConfiguration")
                        .WithMany("ProductSellerMappings")
                        .HasForeignKey("SiteConfigId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Product");

                    b.Navigation("SiteConfiguration");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ScraperRunLog", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.ProductSellerMapping", "Mapping")
                        .WithMany("ScraperRunLogs")
                        .HasForeignKey("MappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechTicker.Domain.Entities.ScraperRunLog", "ParentRun")
                        .WithMany("RetryAttempts")
                        .HasForeignKey("ParentRunId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Mapping");

                    b.Navigation("ParentRun");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.SiteConfiguration", b =>
                {
                    b.HasOne("TechTicker.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("TechTicker.Domain.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("AlertRules");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.Product", b =>
                {
                    b.Navigation("AlertRules");

                    b.Navigation("ProductSellerMappings");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ProductDiscoveryCandidate", b =>
                {
                    b.Navigation("ApprovalWorkflows");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ProductSellerMapping", b =>
                {
                    b.Navigation("PriceHistory");

                    b.Navigation("ScraperRunLogs");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ScraperRunLog", b =>
                {
                    b.Navigation("RetryAttempts");
                });

            modelBuilder.Entity("TechTicker.Domain.Entities.ScraperSiteConfiguration", b =>
                {
                    b.Navigation("ProductSellerMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
